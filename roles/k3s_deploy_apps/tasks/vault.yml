---
- name: Create namespace "{{ apps.vault.namespace }}"
  become: false
  kubernetes.core.k8s:
    name: "{{ apps.vault.namespace }}"
    kind: Namespace
    state: present
  delegate_to: localhost

- name: Pause 3 minutes before restore vault volume backup
  ansible.builtin.pause:
    minutes: 3
  delegate_to: localhost

- name: Get list of vault volume backups
  become: false
  ansible.builtin.uri:
    url: "{{ apps.longhorn.base_url }}/v1/backupvolumes/{{ apps.vault.volume_name }}?action=backupList"
    method: POST
    validate_certs: false
  register: backup_list
  delegate_to: localhost

- name: Get latest backup
  become: false
  ansible.builtin.set_fact:
    backup_id: "{{ backup_list | json_query('json.data[*].{created: created, id: id}') | sort(attribute='created') | reverse | json_query('[0].id') }}"

- name: Restore vault volume backup from longhorn
  become: false
  ansible.builtin.uri:
    url: "{{ apps.longhorn.base_url }}/v1/volumes"
    method: POST
    body: >-
      {
        "name":"{{ apps.vault.volume_name }}",
        "numberOfReplicas":2,
        "accessMode":"rwo",
        "encrypted":false,
        "nodeSelector":[],
        "diskSelector":[],
        "fromBackup":"s3://longhorn-backups@us-east-1/?backup={{ backup_id }}&volume={{ apps.vault.volume_name }}",
        "staleReplicaTimeout":20
      }
    body_format: json
    validate_certs: false
  delegate_to: localhost

- name: Pause 1 minutes to restore vault volume backup
  ansible.builtin.pause:
    minutes: 1
  delegate_to: localhost

- name: Create PV vault
  become: false
  ansible.builtin.uri:
    url: "https://longhorn.local.tecno-fly.com/v1/volumes/{{ apps.vault.volume_name }}?action=pvCreate"
    method: POST
    body: '{"pvName":"{{ apps.vault.volume_name }}","fsType":"ext4"}'
    body_format: json
    validate_certs: false
  delegate_to: localhost

- name: Create PVC vault
  become: false
  ansible.builtin.uri:
    url: "https://longhorn.local.tecno-fly.com/v1/volumes/{{ apps.vault.volume_name }}?action=pvcCreate"
    method: POST
    body: '{"namespace":"{{ apps.vault.namespace }}","pvcName":"{{ apps.vault.pvc_name }}"}'
    body_format: json
    validate_certs: false
  delegate_to: localhost

- name: Deploy vault
  become: false
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  with_items:
    - '{{ playbook_dir }}/k3s-apps-install/files/argocd-homelab-pi-k3s/platform/vault/project/vault.yaml'
    - '{{ playbook_dir }}/k3s-apps-install/files/argocd-homelab-pi-k3s/platform/vault/application/vault.yaml'
  delegate_to: localhost

- name: Pause 1 minutes to deploy vault
  ansible.builtin.pause:
    minutes: 1
  delegate_to: localhost

- name: Wait for vault pods to be running
  become: false
  ansible.builtin.command: kubectl get pods -n vault -o json
  register: kubectl_get_pods_vault
  until: kubectl_get_pods_vault.stdout|from_json|json_query('items[*].status.phase')|unique == ["Running"]
  retries: 10
  delay: 30
  changed_when: true
  delegate_to: localhost

- name: Unseal vault
  become: false
  ansible.builtin.command: "kubectl exec -ti vault-0 -n vault -- vault operator unseal {{ item }}"
  with_items: "{{ apps.vault.unseal_keys }}"
  changed_when: true
  delegate_to: localhost

- name: Download Vault CLI binary
  become: true
  ansible.builtin.get_url:
    url: "https://releases.hashicorp.com/vault/1.14.2/vault_1.14.2_linux_amd64.zip"
    dest: /tmp/vault.zip
    mode: '0755'
  register: download_result
  delegate_to: localhost
  notify: Unzip Vault CLI binary

- name: Port-fordward vault
  become: false
  ansible.builtin.shell: kubectl port-forward -n vault service/vault 8200:8200 > /dev/null 2>&1 &
  changed_when: true
  delegate_to: localhost

- name: Login on vault
  become: false
  ansible.builtin.command: vault login {{ apps.vault.token }}
  environment:
    VAULT_ADDR: http://localhost:8200
    VAULT_SKIP_VERIFY: 'true'
  changed_when: true
  delegate_to: localhost

- name: Grant permission to argocd
  become: false
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      vault write auth/kubernetes/config \
        token_reviewer_jwt="$(kubectl get secret argocd-repo-server -n argocd -o go-template='{{ '{{' }} .data.token {{ '}}' }}' | base64 --decode)" \
        kubernetes_host="$(kubectl config view --raw --minify --flatten --output='jsonpath={.clusters[].cluster.server}')" \
        kubernetes_ca_cert="$(kubectl config view --raw --minify --flatten -o jsonpath='{.clusters[].cluster.certificate-authority-data}' | base64 --decode)" \
        disable_local_ca_jwt="true"
    executable: /bin/bash
  environment:
    VAULT_ADDR: http://localhost:8200
    VAULT_SKIP_VERIFY: 'true'
  changed_when: true
  delegate_to: localhost

- name: Get kubectl port-forward process
  become: false
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      ps -ef | grep -v grep | grep -w 'kubectl port-forward -n vault service/vault 8200:8200' | awk '{print $2}'
    executable: /bin/bash
  register: port_forward_process
  changed_when: true
  delegate_to: localhost

- name: Kill kubectl port-forward process
  become: false
  ansible.builtin.command: "kill -9 {{ item }}"
  with_items: "{{ port_forward_process.stdout_lines }}"
  changed_when: true
  delegate_to: localhost

- name: Restore longhorn backup target secret file
  become: false
  ansible.builtin.lineinfile:
    dest: "{{ playbook_dir }}/k3s-apps-install/files/homelab-pi-k3s/system/longhorn-system/kustomization.yaml"
    regexp: "^#{{ item }}"
    line: "{{ item }}"
    state: present
  with_items:
    - '- ./secrets/longhorn-backup-target-credential-secret.yaml'
  delegate_to: localhost

- name: Commit longhorn changes to repository
  become: false
  ansible.builtin.shell: |
    git add kustomization.yaml &&
    git commit -m "[Ansible] Longhorn - Restore backup target secret file" &&
    git push
  args:
    chdir: "{{ playbook_dir }}/k3s-apps-install/files/homelab-pi-k3s/system/longhorn-system"
  changed_when: true
  delegate_to: localhost
  tags:
    - skip_ansible_lint

- name: Deploy longhorn with vault plugin
  become: false
  kubernetes.core.k8s:
    state: present
    src: "{{ playbook_dir }}/k3s-apps-install/files/argocd-homelab-pi-k3s/system/longhorn-system/application/longhorn-system.yaml"
    apply: true
  delegate_to: localhost

- name: Deploy argocd deploy to argocd
  become: false
  kubernetes.core.k8s:
    state: present
    src: "{{ item }}"
  with_items:
    - '{{ playbook_dir }}/k3s-apps-install/files/argocd-homelab-pi-k3s/platform/argocd/project/argocd.yaml'
    - '{{ playbook_dir }}/k3s-apps-install/files/argocd-homelab-pi-k3s/platform/argocd/application/argocd.yaml'
  delegate_to: localhost
